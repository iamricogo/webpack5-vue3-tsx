@use "sass:map";

@import '@/styles/var/config.module';
@import '@/styles/var/var';
@import '@/styles/mixins/mixins';
@import '@/styles/mixins/utils';
@import '@/styles/mixins/var';

@mixin button-plain($color) {
  color: $color;
  background: mix($--color-white, $color, 90%);
  border-color: mix($--color-white, $color, 60%);

  &:hover,
  &:focus {
    color: $--color-white;
    background: $color;
    border-color: $color;
  }

  &:active {
    color: $--color-white;
    background: mix($--color-black, $color, $--button-active-shade-percent);
    border-color: mix($--color-black, $color, $--button-active-shade-percent);
    outline: none;
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: mix($--color-white, $color, 40%);
      background-color: mix($--color-white, $color, 90%);
      border-color: mix($--color-white, $color, 80%);
    }
  }
}

@mixin button-variant($color, $background-color, $border-color) {
  color: $color;
  background-color: $background-color;
  border-color: $border-color;

  &:hover,
  &:focus {
    color: $color;
    background: mix(
      $--color-white,
      $background-color,
      $--button-hover-tint-percent
    );
    border-color: mix(
      $--color-white,
      $border-color,
      $--button-hover-tint-percent
    );
  }

  &:active {
    color: $color;
    background: mix(
      $--color-black,
      $background-color,
      $--button-active-shade-percent
    );
    border-color: mix(
      $--color-black,
      $border-color,
      $--button-active-shade-percent
    );
    outline: none;
  }

  &.is-active {
    color: $color;
    background: mix(
      $--color-black,
      $background-color,
      $--button-active-shade-percent
    );
    border-color: mix(
      $--color-black,
      $border-color,
      $--button-active-shade-percent
    );
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: $--color-white;
      background-color: mix($background-color, $--color-white);
      border-color: mix($border-color, $--color-white);
    }
  }

  &.is-plain {
    @include button-plain($background-color);
  }
}

@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $border-radius
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;

  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}

:root {
  @each $type in (primary, success, warning, danger, info) {
    --#{$namespace}-button-#{$type}-border-color: var(
      --#{$namespace}-color-#{$type}
    );
  }

  @include set-component-css-var('button', $--button);
}

@include b(button) {
  display: inline-block;
  box-sizing: border-box;
  min-height: map.get($--input-height, 'default');
  margin: 0;
  color: var(
    --#{$namespace}-button-default-font-color,
    map.get($--button, 'default-font-color')
  );
  font-weight: var(--#{$namespace}-button-font-weight);
  line-height: 1;
  white-space: nowrap;
  text-align: center;
  background: var(--#{$namespace}-button-default-background-color);
  border: var(--#{$namespace}-border-base);
  border-color: var(--#{$namespace}-button-default-border-color);
  outline: none;
  cursor: pointer;
  transition: 0.1s;
  -webkit-appearance: none;

  @include utils-user-select(none);

  & + & {
    margin-left: 10px;
  }

  @include button-size(
    map.get($--button-padding-vertical, 'default'),
    map.get($--button-padding-horizontal, 'default'),
    map.get($--button-font-size, 'default'),
    map.get($--button-border-radius, 'default')
  );

  &::-moz-focus-inner {
    border: 0;
  }

  &:hover,
  &:focus {
    color: var(--#{$namespace}-color-primary);
    background-color: var(--#{$namespace}-color-primary-light-9);
    border-color: var(--#{$namespace}-color-primary-light-7);
    outline: none;
  }

  &:active {
    color: mix(
      $--color-black,
      $--color-primary,
      $--button-active-shade-percent
    );
    border-color: mix(
      $--color-black,
      $--color-primary,
      $--button-active-shade-percent
    );
    outline: none;
  }

  & [class*='#{$namespace}-icon-'] {
    & + span {
      margin-left: 5px;
    }
  }

  @include when(plain) {
    &:hover,
    &:focus {
      color: var(--#{$namespace}-color-primary);
      background: var(--#{$namespace}-color-white);
      border-color: var(--#{$namespace}-color-primary);
    }

    &:active {
      color: mix(
        $--color-black,
        $--color-primary,
        $--button-active-shade-percent
      );
      background: var(--#{$namespace}-color-white);
      border-color: mix(
        $--color-black,
        $--color-primary,
        $--button-active-shade-percent
      );
      outline: none;
    }
  }

  @include when(active) {
    color: mix(
      $--color-black,
      $--color-primary,
      $--button-active-shade-percent
    );
    border-color: mix(
      $--color-black,
      $--color-primary,
      $--button-active-shade-percent
    );
  }

  @include when(disabled) {
    &,
    &:hover,
    &:focus {
      color: var(--#{$namespace}-button-disabled-font-color);
      background-color: var(--#{$namespace}-button-disabled-background-color);
      background-image: none;
      border-color: var(--#{$namespace}-button-disabled-border-color);
      cursor: not-allowed;
    }

    &.#{$namespace}-button--text {
      background-color: transparent;
    }

    &.is-plain {
      &,
      &:hover,
      &:focus {
        color: var(--#{$namespace}-button-disabled-font-color);
        background-color: var(--#{$namespace}-color-white);
        border-color: var(--#{$namespace}-button-disabled-border-color);
      }
    }
  }

  @include when(loading) {
    position: relative;
    pointer-events: none;

    &::before {
      position: absolute;
      top: -1px;
      right: -1px;
      bottom: -1px;
      left: -1px;
      background-color: rgba(255, 255, 255, 0.35);
      border-radius: inherit;
      content: '';
      pointer-events: none;
    }
  }

  @include when(round) {
    padding: 12px 23px;
    border-radius: var(--#{$namespace}-border-radius-round);
  }

  @include when(circle) {
    padding: map.get($--button-padding-vertical, 'default');
    border-radius: 50%;
  }

  @each $type in (primary, success, warning, danger, info) {
    @include m($type) {
      @include button-variant(
        map.get($--button-font-color, $type),
        map.get($--button-background-color, $type),
        map.get($--button-border-color, $type)
      );
    }
  }

  @each $size in (medium, small, mini) {
    @include m($size) {
      min-height: map.get($--input-height, $size);

      @include button-size(
        map.get($--button-padding-vertical, $size),
        map.get($--button-padding-horizontal, $size),
        map.get($--button-font-size, $size),
        map.get($--button-border-radius, $size)
      );

      @include when(circle) {
        padding: map.get($--button-padding-horizontal, $size);
      }
    }
  }

  @include m(text) {
    padding-right: 0;
    padding-left: 0;
    color: var(--#{$namespace}-color-primary);
    background: transparent;
    border-color: transparent;

    &:hover,
    &:focus {
      color: mix(
        $--color-white,
        $--color-primary,
        $--button-hover-tint-percent
      );
      background-color: transparent;
      border-color: transparent;
    }

    &:active {
      color: mix(
        $--color-black,
        $--color-primary,
        $--button-active-shade-percent
      );
      background-color: transparent;
      border-color: transparent;
    }

    &.is-disabled,
    &.is-disabled:hover,
    &.is-disabled:focus {
      border-color: transparent;
    }
  }
}

@include b(button-group) {
  @include utils-clearfix;

  display: inline-block;
  vertical-align: middle;

  & > .#{$namespace}-button {
    position: relative;
    float: left;
    & + .#{$namespace}-button {
      margin-left: 0;
    }

    &:first-child {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    &:last-child {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    &:first-child:last-child {
      border-top-left-radius: map.get($--button-border-radius, 'default');
      border-top-right-radius: map.get($--button-border-radius, 'default');
      border-bottom-right-radius: map.get($--button-border-radius, 'default');
      border-bottom-left-radius: map.get($--button-border-radius, 'default');

      &.is-round {
        border-radius: var(--#{$namespace}-border-radius-round);
      }

      &.is-circle {
        border-radius: 50%;
      }
    }

    &:not(:first-child):not(:last-child) {
      border-radius: 0;
    }

    &:not(:last-child) {
      margin-right: -1px;
    }

    &:hover,
    &:focus,
    &:active {
      z-index: 1;
    }

    @include when(active) {
      z-index: 1;
    }
  }

  & > .#{$namespace}-dropdown {
    & > .#{$namespace}-button {
      border-left-color: var(--#{$namespace}-button-divide-border-color);
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  @each $type in (primary, success, warning, danger, info) {
    .#{$namespace}-button--#{$type} {
      &:first-child {
        border-right-color: var(--#{$namespace}-button-divide-border-color);
      }

      &:last-child {
        border-left-color: var(--#{$namespace}-button-divide-border-color);
      }

      &:not(:first-child):not(:last-child) {
        border-right-color: var(--#{$namespace}-button-divide-border-color);
        border-left-color: var(--#{$namespace}-button-divide-border-color);
      }
    }
  }
}
